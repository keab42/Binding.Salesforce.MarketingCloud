<Project Sdk="Microsoft.NET.Sdk" ToolsVersion="15.0">
	<PropertyGroup>
		<TargetFramework>xamarinios10</TargetFramework>
		<TargetFrameworkIdentifier>Xamarin.iOS</TargetFrameworkIdentifier>
		<TargetFrameworkVersion>v1.0</TargetFrameworkVersion>
		<NuGetTargetMoniker>Xamarin.iOS,Version=v1.0</NuGetTargetMoniker>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<Authors>nventive</Authors>
		<Description>An iOS binding over SalesForce.MarketingCloudSDK v6.1.4</Description>
		<PackageId>Uno.Binding.SalesForce.MarketingCloud.iOS</PackageId>
		<OutputPath>bin/$(Configuration)/$(TargetFramework)</OutputPath>
		<PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
		<RootNamespace>Salesforce.MarketingCloud</RootNamespace>
		<IPhoneResourcePrefix>Resources</IPhoneResourcePrefix>
		<DefineConstants>$(DefineConstants);IOS1_0;XAMARIN;XAMARIN_IOS;XAMARIN_IOS_UNIFIED</DefineConstants>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<DebugSymbols>true</DebugSymbols>
		<DebugType>full</DebugType>
	</PropertyGroup>
	<ItemGroup>
		<Reference Include="System" />
		<Reference Include="Xamarin.iOS" />
	</ItemGroup>
	<ItemGroup>
		<!-- Prevents MSBuild from directly building the files-->
		<Compile Remove="Structs.cs;ApiDefinition.cs" />
		<!-- Includes the files in VS -->
		<None Include="Structs.cs;ApiDefinition.cs" />

		<!-- Binding definition -->
		<ObjcBindingApiDefinition Include="ApiDefinition.cs" />
		<ObjcBindingCoreSource Include="Structs.cs" />

		<!-- Includes the SDK in VS-->
		<None Include="MarketingCloudSDK.framework/**/*" />

		<!-- Includes the Resources bundle -->
		<BundleResource Include="Resources\MarketingCloudSDK.bundle\**\*.*">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</BundleResource>

		<!-- Binding instructions for the SDK-->
		<NativeReference Include="MarketingCloudSDK.framework">
			<Kind>Framework</Kind>
			<ForceLoad>True</ForceLoad>
			<Frameworks>Foundation UIKit CoreTelephony</Frameworks>
			<LinkerFlags>-ObjC</LinkerFlags>
		</NativeReference>
	</ItemGroup>

	<Import Project="$(MSBuildExtensionsPath)\Xamarin\iOS\Xamarin.iOS.ObjCBinding.CSharp.targets" />

	<!-- Copied from C:\Program Files (x86)\Microsoft Visual Studio\Preview\Professional\MSBuild\15.0\Bin\Microsoft.Common.CurrentVersion.targets -->
	<!-- Modified to prevent NuGet to attempt to look for the native manifest -->
	<Target Name="BuiltProjectOutputGroup" Returns="@(BuiltProjectOutputGroupOutput)" DependsOnTargets="$(BuiltProjectOutputGroupDependsOn)">
		<ItemGroup>
			<_BuiltProjectOutputGroupOutputIntermediate Include="@(BuiltProjectOutputGroupKeyOutput)" />
		</ItemGroup>

		<!-- This item represents the app.config file -->
		<ItemGroup>
			<_BuiltProjectOutputGroupOutputIntermediate Include="$(AppConfig)" Condition="'$(AddAppConfigToBuildOutputs)'=='true'">
				<FinalOutputPath>$(TargetDir)$(TargetFileName).config</FinalOutputPath>
				<TargetPath>$(TargetFileName).config</TargetPath>
				<!-- For compatibility with 2.0 -->
				<OriginalItemSpec>$(AppConfig)</OriginalItemSpec>
			</_BuiltProjectOutputGroupOutputIntermediate>
		</ItemGroup>

		<ItemGroup>
			<_IsolatedComReference Include="@(COMReference)" Condition=" '%(COMReference.Isolated)' == 'true' " />
			<_IsolatedComReference Include="@(COMFileReference)" Condition=" '%(COMFileReference.Isolated)' == 'true' " />
		</ItemGroup>

		<!-- This is the part that's causing issues, since the manifest is not generated but still looked for by NuGet pack -->
		<!-- This item represents the native manifest, example: WindowsApplication1.exe.manifest or Native.ClassLibrary1.manifest -->
		<!--<ItemGroup>
			<_BuiltProjectOutputGroupOutputIntermediate Include="$(OutDir)$(_DeploymentTargetApplicationManifestFileName)" Condition="'@(NativeReference)'!='' or '@(_IsolatedComReference)'!=''">
				<TargetPath>$(_DeploymentTargetApplicationManifestFileName)</TargetPath>
				-->
		<!-- For compatibility with 2.0 -->
		<!--
				<OriginalItemSpec>$(OutDir)$(_DeploymentTargetApplicationManifestFileName)</OriginalItemSpec>
			</_BuiltProjectOutputGroupOutputIntermediate>
		</ItemGroup>-->

		<!-- Convert intermediate items into final items; this way we can get the full path for each item -->
		<ItemGroup>
			<BuiltProjectOutputGroupOutput Include="@(_BuiltProjectOutputGroupOutputIntermediate->'%(FullPath)')">
				<!-- For compatibility with 2.0 -->
				<OriginalItemSpec Condition="'%(_BuiltProjectOutputGroupOutputIntermediate.OriginalItemSpec)' == ''">%(_BuiltProjectOutputGroupOutputIntermediate.FullPath)</OriginalItemSpec>
			</BuiltProjectOutputGroupOutput>
		</ItemGroup>
	</Target>
</Project>